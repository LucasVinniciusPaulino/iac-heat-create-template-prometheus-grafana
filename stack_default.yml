heat_template_version: 2017-09-01

description: Template para criar uma infraestrutura com Grafana, Prometheus e Node Exporter

parameters:
  public_net:
    type: string
    label: Public network address
    default: 4d1b36da-94e9-4acc-8d3e-c41f9fb6f11b
    description: Public Network ID

  dmz_network_net:
    type: string
    label: DMZ network address
    default: 192.168.200.0/24
    description: Private network address (e.g. 192.168.200.0/24)

  flavor:
    type: string
    description: Flavor for the instances
    default: bc1-basic-1-1
    constraints:
     - custom_constraint: nova.flavor
     
  key_name:
    type: string
    description: teste heat key
    default: zwmocqvjwufn
    
  image:
    type: string
    description: teste heat image
    default: 4b17fe1c-333d-49c0-8b82-6d5a9239979b
    constraints:
      - custom_constraint: glance.image

resources:
  # Rede
  dmz_network:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: dmz-network
      shared: false

  # Sub-rede
  dmz_subnet:
    type: OS::Neutron::Subnet
    depends_on: dmz_network
    properties:
      name: dmz-subnet
      network_id: { get_resource: dmz_network }
      cidr: { get_param: dmz_network_net }
      ip_version: 4
      enable_dhcp: true
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4

  # Roteador
  router:
    type: OS::Neutron::Router
    depends_on: dmz_subnet
    properties:
      name: router
      admin_state_up: true
      external_gateway_info:
        network: { get_param: public_net }

  # Interface do roteador
  dmz_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: router
    properties:
      router: { get_resource: router }
      subnet: { get_resource: dmz_subnet }

  # Grupo de segurança
  dmz_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: 'teste heat grupo de seguranca'
      name: dmz-sec-group
      rules:
        - direction: egress
          ethertype: IPv4
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv4
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
        - direction: ingress
          ethertype: IPv4
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 9090
          port_range_max: 9090
          protocol: tcp
        - direction: ingress
          ethertype: IPv4
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 9100
          port_range_max: 9100
          protocol: tcp
        - direction: ingress
          ethertype: IPv4
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 3000
          port_range_max: 3000
          protocol: tcp

  # Volumes de boot
  my_vol1:
    type: OS::Cinder::Volume
    properties:
      volume_type: Platinum
      size: 100
      image: { get_param: image }

  my_vol2:
    type: OS::Cinder::Volume
    properties:
      volume_type: Platinum
      size: 30
      image: { get_param: image }

  my_vol3:
    type: OS::Cinder::Volume
    properties:
      volume_type: Platinum
      size: 30
      image: { get_param: image }


  # Servidores
  server1:
    type: OS::Nova::Server
    properties:
      name: server1
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      security_groups: [ { get_resource: dmz_security_group } ]
      networks: [{ network: { get_resource: dmz_network } }]
      block_device_mapping_v2:
        - volume_id: { get_resource: my_vol1 }
          device_name: /dev/vda
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/bash -v
            sudo apt-get update
            sudo apt-get install -y curl wget
            sudo apt-get install -y prometheus prometheus-node-exporter

            # Configuração do Prometheus
            cat <<EOF > /etc/prometheus/prometheus.yml
            global:
              scrape_interval: 10s

            scrape_configs:
              - job_name: 'prometheus'
                scrape_interval: 10s
                static_configs:
                  - targets: ['localhost:9090']

              - job_name: 'node_exporter2'
                static_configs:
                  - targets: ['server2_ip:9100']

              - job_name: 'node_exporter3'
                static_configs:
                  - targets: ['server3_ip:9100']

            EOF
            sed -i "s/server2_ip/%server2_ip%/g" /etc/prometheus/prometheus.yml
            sed -i "s/server3_ip/%server3_ip%/g" /etc/prometheus/prometheus.yml

            sudo systemctl restart prometheus
            sudo systemctl start prometheus

            # Instalar Docker
            sudo apt-get install docker.io -y

            # Iniciar Grafana
            sudo docker run -d --name=grafana -p 3000:3000 grafana/grafana

            # Esperar o Grafana iniciar
            sleep 40

            # Definir a variável de ambiente do IP do server1
            export SERVER1_IP="%server1_ip%"

            # Configurar o datasource Prometheus no Grafana
            sudo docker exec grafana sh -c "mkdir -p /etc/grafana/provisioning/datasources"
            sudo docker exec grafana sh -c "cat <<EOF2 > /etc/grafana/provisioning/datasources/prometheus.yml
            apiVersion: 1

            datasources:
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://$SERVER1_IP:9090
                uid: DS_PROMETHEUS
                isDefault: true
                editable: true
            EOF2"

            # Configurar o dashboard no Grafana
            sudo docker exec grafana sh -c "mkdir -p /etc/grafana/provisioning/dashboards"
            sudo docker exec grafana sh -c "cat <<EOF3 > /etc/grafana/provisioning/dashboards/dashboards.yml
            apiVersion: 1

            providers:
              - name: 'default'
                orgId: 1
                folder: ''
                type: file
                disableDeletion: false
                editable: true
                updateIntervalSeconds: 10
                options:
                  path: /var/lib/grafana/dashboards
            EOF3"

            # Baixar o JSON do dashboard
            sudo docker exec grafana sh -c "mkdir -p /var/lib/grafana/dashboards"
            sudo docker exec grafana sh -c "curl -o /var/lib/grafana/dashboards/json_node.json https://raw.githubusercontent.com/LucasVinniciusPaulino/json-dashboard-grafana-heat-iac-2/main/json_node_modified3.json"

            # Reiniciar o Grafana para aplicar as configurações
            sudo docker restart grafana

          params:
            "%server2_ip%": { get_attr: [server2, first_address] }
            "%server3_ip%": { get_attr: [server3, first_address] }
            "%server1_ip%": { get_attr: [server1_floating_ip, floating_ip_address] }


  server2:
    type: OS::Nova::Server
    properties:
      name: server2
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      security_groups: [ { get_resource: dmz_security_group } ]
      networks: [{ network: { get_resource: dmz_network } }]
      block_device_mapping_v2:
        - volume_id: { get_resource: my_vol2 }
          device_name: /dev/vda
      user_data_format: RAW
      user_data: |
        #! /bin/bash -v
        sudo apt-get update
        sudo apt-get install -y curl wget
        sudo apt-get install docker.io -y
        docker run -d --net="host" --pid="host" -v "/:/host:ro,rslave" quay.io/prometheus/node-exporter:latest --path.rootfs=/host

  server3:
    type: OS::Nova::Server
    properties:
      name: server3
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      security_groups: [ { get_resource: dmz_security_group } ]
      networks: [{ network: { get_resource: dmz_network } }]
      block_device_mapping_v2:
        - volume_id: { get_resource: my_vol3 }
          device_name: /dev/vda
      user_data_format: RAW
      user_data: |
        #! /bin/bash -v
        sudo apt-get update
        sudo apt-get install -y curl wget
        sudo apt-get install docker.io -y
        docker run -d --net="host" --pid="host" -v "/:/host:ro,rslave" quay.io/prometheus/node-exporter:latest --path.rootfs=/host

  # IPs Flutuantes
  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }

  server2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }

  server3_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }

  # Associação dos IPs Flutuantes
  server1_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: server1_floating_ip }
      port_id: { get_attr: [server1, addresses, dmz-network, 0, port] }

  server2_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: server2_floating_ip }
      port_id: { get_attr: [server2, addresses, dmz-network, 0, port] }

  server3_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: server3_floating_ip }
      port_id: { get_attr: [server3, addresses, dmz-network, 0, port] }

outputs:
  server1_public_ip:
    description: IP público do servidor 1
    value: { get_attr: [server1_floating_ip, floating_ip_address] }

  server2_public_ip:
    description: IP público do servidor 2
    value: { get_attr: [server2_floating_ip, floating_ip_address] }

  server3_public_ip:
    description: IP público do servidor 3
    value: { get_attr: [server3_floating_ip, floating_ip_address] }
